import subprocess
import sys
import os

subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
print("Your bot token please: ")
os.environ['bottoken'] = input()
print("Your database host: ")
os.environ['dbhost'] = input()
print("Your db password: ")
os.environ['password'] = input()
print("Your db port: ")
os.environ['port'] = input()
print("Your db user: ")
os.environ['user'] = input()
print("your database: ")
os.environ['database'] = input()
print("Your channel url: ")
os.environ['channel'] = input()


import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import hbold, hlink
from aiogram.dispatcher.filters import Text
from src.config import token, chat_id, not_sub_message
from src.config import user, port, password, database, host
import datetime
import json
from src.inlines import check_sub_menu
from src.news import check_news_update
from src.sqlighter import DataBase


bot = Bot(token=os.environ['bottoken'], parse_mode=types.ParseMode.HTML)
# bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
# db = DataBase(host=host, password=password, port=port, user=user, database=database)
db = DataBase(host=os.environ['dbhost'], password=os.environ['password'], port=os.environ['port'],
              user=os.environ['user'], database=os.environ['database'])

def check_sub_channel(chat_member):
    """–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    print(chat_member['status'], "\n")
    if chat_member['status'] != 'left':
        return True
    else:
        return False


@dp.message_handler(commands="start")
async def start(message: types.Message):
    """–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–∞—Ä—Ç" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç, –∏ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    start_buttons = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")
            ],
            [
                types.KeyboardButton(text="‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π"),
                types.KeyboardButton(text="üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
            ],
            [
                types.KeyboardButton(text="‚úî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
                types.KeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
            ],
            ],
        resize_keyboard=True)
    await message.answer("–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=start_buttons)


@dp.message_handler(Text(equals="‚úî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
async def subscribe(message: types.Message):
    """–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –¥–∞–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ"""
    if check_sub_channel(await bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)):
        if not db.subscriber_exists(message.from_user.id):
            """–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ"""
            db.add_subscriber(message.from_user.id)
            await message.answer("you are in my database :)")
        else:
            await message.answer("wait...")
            """–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å"""
            db.update_subscription(message.from_user.id, True)
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üìß")
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=check_sub_menu)


@dp.callback_query_handler(text="subchanneldone")
async def sub_channel_done(message: types.Message):
    """–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è" –∏ —É–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É"""
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if check_sub_channel(await bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)):
        await message.answer("–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=start_buttons)
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=check_sub_menu)


@dp.message_handler(Text(equals="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
async def unsubscribe(message: types.Message):
    """—Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ —É –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"""
    if check_sub_channel(await bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)):
        if not db.subscriber_exists(message.from_user.id):
            """–µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ"""
            db.add_subscriber(message.from_user.id, False)
            await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ü§®")
        else:
            """–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å"""
            db.update_subscription(message.from_user.id, False)
            await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏üëã")
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=check_sub_menu)


@dp.message_handler(Text(equals="üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"))
async def get_all_news(message: types.Message):
    """–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    with open("news_dict.json", encoding='utf-8') as file:
        news_dict = json.load(file)
    for k, v in sorted(news_dict.items()):
        news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                f"{hlink(v['article_title'], v['article_url'])}"
        await message.answer(news)


@dp.message_handler(Text(equals="‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π"))
async def get_last_five_news(message: types.Message):
    """–¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π", –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if check_sub_channel(await bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)):
        with open("news_dict.json", encoding='utf-8') as file:
            news_dict = json.load(file)
        for k, v in sorted(news_dict.items())[-5:]:
            news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                   f"{hlink(v['article_title'], v['article_url'])}"
            await message.answer(news)
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=check_sub_menu)


@dp.message_handler(Text(equals="üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"))
async def get_fresh_news(message: types.Message):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    fresh_news = check_news_update()
    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                   f"{hlink(v['article_title'], v['article_url'])}"
            await message.answer(news)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")


async def news_every_minute():
    """—Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º(—Ä–∞—Å—Å—ã–ª–∫–∏)"""
    while True:
        fresh_news = check_news_update()
        """–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        subscribers = db.get_subscriptions()
        if len(fresh_news) >= 1:
            for k, v in sorted(fresh_news.items()):
                news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                       f"{hlink(v['article_title'], v['article_url'])}"
                for s in subscribers:
                    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
                    await bot.send_message(s[1], news, disable_notification=True)
        else:
            for s in subscribers:
                await bot.send_message(s[1], "–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...", disable_notification=True)
        await asyncio.sleep(100)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(news_every_minute())
    executor.start_polling(dp)
