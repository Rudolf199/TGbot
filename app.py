import asyncio
import datetime
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import hbold, hunderline, hcode, hlink
from aiogram.dispatcher.filters import Text
from config import token, user_id
from news import check_news_update
from sqlighter import SQLighter


bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
db = SQLighter('database.db')
# start_buttons = ["üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π", "üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"]
@dp.message_handler(commands="start")
async def start(message: types.Message):
    # start_buttons = ["üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π", "üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"]
    start_buttons = types.ReplyKeyboardMarkup(
        keyboard=[
        [
            types.KeyboardButton(text="üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏")
        ],
        [
            types.KeyboardButton(text="‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π"),
            types.KeyboardButton(text="üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
        ],
        [
            types.KeyboardButton(text="‚úî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
            types.KeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
        ],
        ],
        resize_keyboard=True)
    # keyboard.add(*start_buttons)

    await message.answer("–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=start_buttons)

@dp.message_handler(Text(equals="‚úî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"))
async def subscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
    else:
        # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å
        db.update_subscription(message.from_user.id, True)

    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üìß")

@dp.message_handler(Text(equals="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
async def subscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ü§®")
    else:
        # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏üëã")

    # await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üìß")


"""@dp.message_handler(commands="start")
async def start(message: types.Message):
    start_buttons = ["–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π", "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer("–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π", reply_markup=keyboard)"""

@dp.message_handler(Text(equals="üì∞ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"))
async def get_all_news(message: types.Message):
    with open("news_dict.json", encoding='utf-8') as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items()):
        # news = f"<b>{datetime.datetime.fromtimestamp(v['article_date_timestamp'])}</b>\n" \
        #        f"<u>{v['article_title']}</u>\n" \
        #        f"<code>{v['article_desc']}</code>\n" \
        #        f"{v['article_url']}"
        # news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
        #        f"{hunderline(v['article_title'])}\n" \
        #        f"{hcode(v['article_desc'])}\n" \
        #        f"{hlink(v['article_title'], v['article_url'])}"
        news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
               f"{hlink(v['article_title'], v['article_url'])}"

        await message.answer(news)


@dp.message_handler(Text(equals="‚¨Ö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π"))
async def get_last_five_news(message: types.Message):
    with open("news_dict.json", encoding='utf-8') as file:
        news_dict = json.load(file)

    for k, v in sorted(news_dict.items())[-5:]:
        news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
               f"{hlink(v['article_title'], v['article_url'])}"

        await message.answer(news)


@dp.message_handler(Text(equals="üçÖüóûÔ∏è–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"))
async def get_fresh_news(message: types.Message):
    fresh_news = check_news_update()

    if len(fresh_news) >= 1:
        for k, v in sorted(fresh_news.items()):
            news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                   f"{hlink(v['article_title'], v['article_url'])}"

            await message.answer(news)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")


async def news_every_minute():
    while True:
        fresh_news = check_news_update()
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = db.get_subscriptions()
        if len(fresh_news) >= 1:
            for k, v in sorted(fresh_news.items()):
                news = f"{hbold(datetime.datetime.fromtimestamp(v['article_date_timestamp']))}\n" \
                       f"{hlink(v['article_title'], v['article_url'])}"
                for s in subscribers:
                    # get your id @userinfobot
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    await bot.send_message(s[1], news, disable_notification=True)

        else:
            for s in subscribers:
                await bot.send_message(s[1], "–ü–æ–∫–∞ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...", disable_notification=True)

        await asyncio.sleep(1)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(news_every_minute())
    executor.start_polling(dp)